class Solution {
public:
    vector<long long> getDistances(vector<int>& arr) {
        unordered_map<int,vector<int>>mp;
        for(int i = 0;i<arr.size(); i++){
           mp[arr[i]].push_back(i);           // store indx to the map for each element
        }

       vector<long long> ans(arr.size(), 0);
    for (auto& [value, indices] : mp) {           // travese over the map {element- > {vector of idx}}
        long long n = indices.size();
        vector<long long> prefixSum(n + 1, 0);    // make a prefixVector for each elemnt idxes

    
        for (long long i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + indices[i];     // calculate the prefiix sum for each idx array
        }

        for (long long i = 0; i < n; i++) {
            long long leftSum = prefixSum[i];
            long long rightSum = prefixSum[n] - prefixSum[i + 1];
            ans[indices[i]] = (indices[i] * i - leftSum) + (rightSum - indices[i] * (n - i - 1)); // compute the logic :- 
                                                                                              ans[that particular idx of an ele] = curr_idx of ele * i - left sum || vice versa
        }
    }

    return ans;
}

};
