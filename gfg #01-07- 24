// first solution USING Queue

void convert(Node *head, TreeNode *&root) {
    if (!head) return;

    vector<int> temp;
    Node *t = head;
    while (t) {
        temp.push_back(t->data);
        t = t->next;
    }

    int n = temp.size();
    if (n == 0) return;

    root = new TreeNode(temp[0]);
    queue<TreeNode *> q;
    q.push(root);

    int i = 1;
    while (i < n) {
        TreeNode *current = q.front();
        q.pop();

        if (i < n) {
            current->left = new TreeNode(temp[i]);
            q.push(current->left);
            i++;
        }

        if (i < n) {
            current->right = new TreeNode(temp[i]);
            q.push(current->right);
            i++;
        }
    }
}
// Second Solution USING recursion

void bulidBinaryTree(int i, vector<int>& elements, TreeNode *&root) {
    int n = elements.size();
    
    if (i >= n) {
        root = NULL;
        return;
    }
    
    int data = elements[i];
    
    root = new TreeNode(data);
    
  
    bulidBinaryTree(2*i + 1, elements, root->left);   
    bulidBinaryTree(2*i + 2, elements, root->right);  
}
void convert(Node *head, TreeNode *&root) {
    // Your code here
    vector<int> elements;
    
    Node* temp = head;
    
    while(temp!=NULL){
        int d = temp->data;
        elements.push_back(d);
        
        temp=temp->next;
    }
    
    return bulidBinaryTree(0,elements,root);
}
